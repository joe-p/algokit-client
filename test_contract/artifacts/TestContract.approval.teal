#pragma version 10

// This TEAL was generated by TEALScript v0.86.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// getSum(a: number, b: number): number
//
// Calculates the sum of two numbers
//
// @param a
// @param b
// @returns The sum of a and b
getSum:
	proto 2 1

	// test_contract/test.algo.ts:12
	// return a + b;
	frame_dig -1 // a: number
	frame_dig -2 // b: number
	+
	retsub

// getDifference(a: number, b: number): number
//
// Calculates the difference between two numbers
//
// @param a
// @param b
// @returns The difference between a and b.
getDifference:
	proto 2 1

	// test_contract/test.algo.ts:23
	// return a >= b ? a - b : b - a;
	frame_dig -1 // a: number
	frame_dig -2 // b: number
	>=
	bz *ternary0_false
	frame_dig -1 // a: number
	frame_dig -2 // b: number
	-
	b *ternary0_end

*ternary0_false:
	frame_dig -2 // b: number
	frame_dig -1 // a: number
	-

*ternary0_end:
	retsub

// doMath(uint64,uint64,string)uint64
*abi_route_doMath:
	// The ABI return prefix
	byte 0x151f7c75

	// operation: string
	txna ApplicationArgs 3
	extract 2 0

	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute doMath(uint64,uint64,string)uint64
	callsub doMath
	itob
	concat
	log
	int 1
	return

// doMath(a: number, b: number, operation: string): number
//
// A method that takes two numbers and does either addition or subtraction
//
// @param a The first number
// @param b The second number
// @param operation The operation to perform. Can be either 'sum' or 'difference'
//
// @returns The result of the operation
doMath:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// *if0_condition
	// test_contract/test.algo.ts:38
	// operation === 'sum'
	frame_dig -3 // operation: string
	byte 0x73756d // "sum"
	==
	bz *if0_elseif1_condition

	// *if0_consequent
	// test_contract/test.algo.ts:39
	// result = this.getSum(a, b)
	frame_dig -2 // b: number
	frame_dig -1 // a: number
	callsub getSum
	frame_bury 0 // result: number
	b *if0_end

*if0_elseif1_condition:
	// test_contract/test.algo.ts:40
	// operation === 'difference'
	frame_dig -3 // operation: string
	byte 0x646966666572656e6365 // "difference"
	==
	bz *if0_else

	// *if0_elseif1_consequent
	// test_contract/test.algo.ts:41
	// result = this.getDifference(a, b)
	frame_dig -2 // b: number
	frame_dig -1 // a: number
	callsub getDifference
	frame_bury 0 // result: number
	b *if0_end

*if0_else:
	err // 'Invalid operation'

*if0_end:
	// test_contract/test.algo.ts:44
	// return result;
	frame_dig 0 // result: number

	// set the subroutine return value
	frame_bury 0
	retsub

// txnMethod(pay)address
*abi_route_txnMethod:
	// The ABI return prefix
	byte 0x151f7c75

	// txn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute txnMethod(pay)address
	callsub txnMethod
	concat
	log
	int 1
	return

// txnMethod(txn: PayTxn): Address
txnMethod:
	proto 1 1

	// test_contract/test.algo.ts:48
	// return txn.sender;
	frame_dig -1 // txn: PayTxn
	gtxns Sender
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "doMath(uint64,uint64,string)uint64"
	method "txnMethod(pay)address"
	txna ApplicationArgs 0
	match *abi_route_doMath *abi_route_txnMethod
	err